## 📊 Supabase DB 스키마 - Firebase 연동 버전 (전체)

### 1. 사용자 관련 테이블

```sql
-- 사용자 기본 정보
CREATE TABLE users (
    id TEXT PRIMARY KEY, -- Firebase UID
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    profile_name VARCHAR(100),
    bio TEXT,
    location VARCHAR(100),
    avatar_url TEXT,
    is_profile_hidden BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 사용자 통계
CREATE TABLE user_statistics (
    user_id TEXT PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    exercises_completed INTEGER DEFAULT 0,
    current_weekly_streak INTEGER DEFAULT 0,
    longest_weekly_streak INTEGER DEFAULT 0,
    total_modules_completed INTEGER DEFAULT 0,
    last_activity_date DATE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 주간 학습 목표
CREATE TABLE weekly_learning_goals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    week_start_date DATE NOT NULL,
    target_days INTEGER NOT NULL CHECK (target_days BETWEEN 1 AND 7),
    completed_days INTEGER DEFAULT 0,
    daily_completion JSONB DEFAULT '{"1": false, "2": false, "3": false, "4": false, "5": false, "6": false, "7": false}',
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, week_start_date)
);

-- 일일 집중 목표
CREATE TABLE daily_focus_goals (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    goal_date DATE NOT NULL,
    focus_text VARCHAR(90) NOT NULL,
    start_reminder_time TIME,
    end_reminder_time TIME,
    is_completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, goal_date)
);
```

### 2. 모듈 및 콘텐츠 관련 테이블

```sql
-- 카테고리/주제
CREATE TABLE categories (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL,
    display_name VARCHAR(100) NOT NULL, -- 예: "ADHD challenges"
    color_code VARCHAR(7),
    icon_url TEXT,
    display_order INTEGER DEFAULT 0,
    is_active BOOLEAN DEFAULT TRUE
);

-- 전문가 정보
CREATE TABLE experts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL,
    title VARCHAR(200),
    profile_image_url TEXT,
    bio TEXT
);

-- 모듈 (코스)
CREATE TABLE modules (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(200) NOT NULL,
    description TEXT,
    thumbnail_url TEXT,
    header_image_url TEXT, -- 모듈 상세 페이지 상단 이미지
    expert_id UUID REFERENCES experts(id),
    category_id UUID REFERENCES categories(id),
    estimated_duration_minutes INTEGER,
    difficulty_level VARCHAR(20) CHECK (difficulty_level IN ('beginner', 'intermediate', 'advanced')),
    is_featured BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    display_order INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 세션 (챕터)
CREATE TABLE sessions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    module_id UUID NOT NULL REFERENCES modules(id) ON DELETE CASCADE,
    session_number INTEGER NOT NULL,
    title VARCHAR(200) NOT NULL,
    icon_type VARCHAR(50), -- 예: 'plant', 'star', 'heart' 등
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(module_id, session_number)
);

-- 세션 항목 타입 변경: assessment(체크인), lesson, journal(성찰), strategy(브레인핵), quiz
CREATE TABLE session_items (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    item_type VARCHAR(20) NOT NULL CHECK (item_type IN ('assessment', 'lesson', 'journal', 'strategy', 'quiz')),
    item_order INTEGER NOT NULL,
    title VARCHAR(200),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(session_id, item_order)
);

-- Lesson 상세 콘텐츠 (긴 텍스트와 오디오)
CREATE TABLE lesson_contents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_item_id UUID UNIQUE NOT NULL REFERENCES session_items(id) ON DELETE CASCADE,
    full_text TEXT NOT NULL, -- 전체 레슨 텍스트
    audio_url TEXT, -- 오디오 파일 URL
    audio_duration_seconds INTEGER,
    reading_time_minutes INTEGER,
    key_takeaways JSONB, -- ["핵심포인트1", "핵심포인트2", ...]
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Assessment (체크인) 질문
CREATE TABLE assessment_questions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_item_id UUID NOT NULL REFERENCES session_items(id) ON DELETE CASCADE,
    question_order INTEGER NOT NULL,
    question_text TEXT NOT NULL,
    question_type VARCHAR(50) -- 예: 'frequency', 'intensity', 'agreement'
);

-- Assessment 선택지
CREATE TABLE assessment_options (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    question_id UUID NOT NULL REFERENCES assessment_questions(id) ON DELETE CASCADE,
    option_text VARCHAR(100) NOT NULL,
    option_value INTEGER NOT NULL,
    display_order INTEGER NOT NULL
);

-- Strategy (브레인핵) 상세 내용
CREATE TABLE strategy_contents (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_item_id UUID UNIQUE NOT NULL REFERENCES session_items(id) ON DELETE CASCADE,
    technique_name VARCHAR(200) NOT NULL,
    description TEXT NOT NULL,
    steps JSONB, -- 단계별 설명을 JSON 배열로
    examples JSONB, -- 실제 예시들
    when_to_use TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- Journal (성찰) 프롬프트
CREATE TABLE journal_prompts (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_item_id UUID UNIQUE NOT NULL REFERENCES session_items(id) ON DELETE CASCADE,
    prompt_text TEXT NOT NULL,
    placeholder_text TEXT,
    min_length INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 퀴즈 질문
CREATE TABLE quiz_questions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_item_id UUID NOT NULL REFERENCES session_items(id) ON DELETE CASCADE,
    question_order INTEGER NOT NULL,
    question_text TEXT NOT NULL,
    explanation TEXT
);

-- 퀴즈 선택지
CREATE TABLE quiz_options (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    question_id UUID NOT NULL REFERENCES quiz_questions(id) ON DELETE CASCADE,
    option_text TEXT NOT NULL,
    is_correct BOOLEAN DEFAULT FALSE,
    display_order INTEGER NOT NULL
);
```

### 3. 사용자 진행상황 및 활동 관련 테이블

```sql
-- 사용자별 모듈 진행상황
CREATE TABLE user_module_progress (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    module_id UUID NOT NULL REFERENCES modules(id),
    status VARCHAR(20) DEFAULT 'not_started' CHECK (status IN ('not_started', 'in_progress', 'completed')),
    current_session_id UUID REFERENCES sessions(id),
    progress_percentage DECIMAL(5,2) DEFAULT 0,
    started_at TIMESTAMPTZ,
    completed_at TIMESTAMPTZ,
    last_accessed_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, module_id)
);

-- 사용자별 세션 진행상황
CREATE TABLE user_session_progress (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_id UUID NOT NULL REFERENCES sessions(id),
    status VARCHAR(20) DEFAULT 'locked' CHECK (status IN ('locked', 'unlocked', 'in_progress', 'completed')),
    progress_percentage DECIMAL(5,2) DEFAULT 0,
    started_at TIMESTAMPTZ,
    completed_at TIMESTAMPTZ,
    UNIQUE(user_id, session_id)
);

-- 사용자별 세션 항목 완료 상태
CREATE TABLE user_item_progress (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_item_id UUID NOT NULL REFERENCES session_items(id),
    is_completed BOOLEAN DEFAULT FALSE,
    completed_at TIMESTAMPTZ,
    time_spent_seconds INTEGER DEFAULT 0,
    UNIQUE(user_id, session_item_id)
);

-- 사용자 Journal (성찰) 응답
CREATE TABLE user_journal_entries (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_item_id UUID NOT NULL REFERENCES session_items(id),
    journal_text TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 사용자 Assessment 응답
CREATE TABLE user_assessment_responses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    question_id UUID NOT NULL REFERENCES assessment_questions(id),
    selected_option_id UUID NOT NULL REFERENCES assessment_options(id),
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 사용자 Quiz 응답
CREATE TABLE user_quiz_responses (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    question_id UUID NOT NULL REFERENCES quiz_questions(id),
    selected_option_id UUID NOT NULL REFERENCES quiz_options(id),
    is_correct BOOLEAN NOT NULL,
    attempt_number INTEGER DEFAULT 1,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 사용자 Strategy 북마크
CREATE TABLE user_strategy_bookmarks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_item_id UUID NOT NULL REFERENCES session_items(id),
    is_bookmarked BOOLEAN DEFAULT TRUE,
    last_used_at TIMESTAMPTZ,
    use_count INTEGER DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, session_item_id)
);

-- 사용자 Key Ideas (레슨 핵심 내용)
CREATE TABLE user_key_ideas (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_item_id UUID NOT NULL REFERENCES session_items(id),
    lesson_title VARCHAR(200),
    key_points JSONB, -- 핵심 포인트들을 JSON 배열로
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 4. ADHD 특화 알림 시스템

```sql
-- 알림 설정 (ADHD 사용자를 위한 세밀한 설정)
CREATE TABLE notification_settings (
    user_id TEXT PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    -- 일일 학습 리마인더
    daily_study_reminder BOOLEAN DEFAULT TRUE,
    daily_study_time TIME DEFAULT '09:00:00',

    -- 일일 목표 리마인더
    daily_focus_start_reminder BOOLEAN DEFAULT TRUE,
    daily_focus_end_reminder BOOLEAN DEFAULT TRUE,

    -- 약물 복용 리마인더
    medication_reminders BOOLEAN DEFAULT FALSE,
    medication_schedule JSONB DEFAULT '{"morning": null, "afternoon": null, "evening": null, "night": null}',

    -- 진행중인 세션 완료 리마인더
    incomplete_session_reminder BOOLEAN DEFAULT TRUE,
    incomplete_session_hours INTEGER DEFAULT 24, -- N시간 후 리마인드

    -- 주간 목표 리마인더
    weekly_goal_reminder BOOLEAN DEFAULT TRUE,
    weekly_goal_reminder_day INTEGER DEFAULT 5, -- 금요일

    -- 장기 미접속 리마인더
    inactivity_reminder BOOLEAN DEFAULT TRUE,
    inactivity_days INTEGER DEFAULT 3,

    -- 세션 완료 축하 알림
    achievement_notifications BOOLEAN DEFAULT TRUE,

    -- 스마트 알림 (사용자 패턴 학습)
    smart_notifications BOOLEAN DEFAULT TRUE,
    preferred_notification_times JSONB, -- AI가 학습한 최적 시간대

    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 알림 스케줄 (예약된 알림)
CREATE TABLE notification_schedules (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    notification_type VARCHAR(50) NOT NULL,
    scheduled_for TIMESTAMPTZ NOT NULL,
    is_sent BOOLEAN DEFAULT FALSE,
    sent_at TIMESTAMPTZ,
    metadata JSONB, -- 알림 관련 추가 데이터
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 알림 로그
CREATE TABLE notification_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    notification_type VARCHAR(50) NOT NULL,
    title VARCHAR(200),
    message TEXT,
    is_sent BOOLEAN DEFAULT FALSE,
    sent_at TIMESTAMPTZ,
    is_read BOOLEAN DEFAULT FALSE,
    read_at TIMESTAMPTZ,
    clicked_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 사용자 활동 패턴 (스마트 알림용)
CREATE TABLE user_activity_patterns (
    user_id TEXT PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    most_active_hours JSONB, -- {"9": 0.8, "10": 0.9, ...}
    most_active_days JSONB, -- {"monday": 0.7, "tuesday": 0.8, ...}
    average_session_duration_minutes INTEGER,
    preferred_session_times JSONB,
    last_analyzed_at TIMESTAMPTZ,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 5. 추천 시스템 및 기타

```sql
-- 모듈 추천
CREATE TABLE module_recommendations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    module_id UUID NOT NULL REFERENCES modules(id),
    recommendation_reason VARCHAR(500),
    recommendation_type VARCHAR(50), -- 'similar_topic', 'next_level', 'popular', etc.
    score DECIMAL(5,2),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, module_id)
);

-- 사용자 활동 로그
CREATE TABLE user_activity_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    activity_type VARCHAR(50) NOT NULL,
    module_id UUID REFERENCES modules(id),
    session_id UUID REFERENCES sessions(id),
    session_item_id UUID REFERENCES session_items(id),
    activity_data JSONB,
    activity_timestamp TIMESTAMPTZ DEFAULT NOW()
);

-- 사용자 선호도 (추천 알고리즘용)
CREATE TABLE user_preferences (
    user_id TEXT PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    preferred_categories JSONB, -- ["category_id1", "category_id2"]
    preferred_difficulty VARCHAR(20),
    preferred_duration_minutes INTEGER,
    disliked_topics JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 6. 인덱스

```sql
-- 성능 최적화 인덱스
CREATE INDEX idx_module_category ON modules(category_id);
CREATE INDEX idx_module_featured ON modules(is_featured, is_active);
CREATE INDEX idx_session_module ON sessions(module_id);
CREATE INDEX idx_item_session ON session_items(session_id);
CREATE INDEX idx_user_module_status ON user_module_progress(user_id, status);
CREATE INDEX idx_weekly_goal_date ON weekly_learning_goals(user_id, week_start_date);
CREATE INDEX idx_daily_focus_date ON daily_focus_goals(user_id, goal_date);
CREATE INDEX idx_activity_log_user_time ON user_activity_logs(user_id, activity_timestamp);
CREATE INDEX idx_notification_schedule ON notification_schedules(user_id, scheduled_for, is_sent);
CREATE INDEX idx_user_item_progress ON user_item_progress(user_id, session_item_id);
CREATE INDEX idx_user_session_progress ON user_session_progress(user_id, session_id);
```

### 7. RLS (Row Level Security) 정책

```sql
-- RLS 활성화
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_module_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_session_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_item_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_journal_entries ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_assessment_responses ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_quiz_responses ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_strategy_bookmarks ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_key_ideas ENABLE ROW LEVEL SECURITY;
ALTER TABLE weekly_learning_goals ENABLE ROW LEVEL SECURITY;
ALTER TABLE daily_focus_goals ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification_settings ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification_schedules ENABLE ROW LEVEL SECURITY;
ALTER TABLE notification_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_activity_patterns ENABLE ROW LEVEL SECURITY;
ALTER TABLE module_recommendations ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_activity_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_preferences ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_statistics ENABLE ROW LEVEL SECURITY;

-- RLS 정책 예시 (auth.uid()는 Firebase UID를 반환한다고 가정)
CREATE POLICY "Users can view own profile" ON users
    FOR SELECT USING (auth.uid() = id);

CREATE POLICY "Users can update own profile" ON users
    FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can view own progress" ON user_module_progress
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own statistics" ON user_statistics
    FOR ALL USING (auth.uid() = user_id);

-- 모든 사용자가 모듈과 콘텐츠를 볼 수 있음
CREATE POLICY "Anyone can view modules" ON modules
    FOR SELECT USING (is_active = true);

CREATE POLICY "Anyone can view categories" ON categories
    FOR SELECT USING (is_active = true);

CREATE POLICY "Anyone can view sessions" ON sessions
    FOR SELECT USING (true);

CREATE POLICY "Anyone can view session items" ON session_items
    FOR SELECT USING (true);
```

### 8. 트리거 함수

```sql
-- updated_at 자동 업데이트 트리거
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- 트리거 적용
CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_statistics_updated_at BEFORE UPDATE ON user_statistics
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_daily_focus_goals_updated_at BEFORE UPDATE ON daily_focus_goals
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_notification_settings_updated_at BEFORE UPDATE ON notification_settings
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_activity_patterns_updated_at BEFORE UPDATE ON user_activity_patterns
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_preferences_updated_at BEFORE UPDATE ON user_preferences
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_user_journal_entries_updated_at BEFORE UPDATE ON user_journal_entries
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_modules_updated_at BEFORE UPDATE ON modules
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- 통계 자동 업데이트 함수
CREATE OR REPLACE FUNCTION update_user_statistics()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_TABLE_NAME = 'user_item_progress' AND NEW.is_completed = TRUE THEN
        UPDATE user_statistics
        SET exercises_completed = exercises_completed + 1,
            last_activity_date = CURRENT_DATE
        WHERE user_id = NEW.user_id;
    END IF;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_stats_on_item_complete
    AFTER UPDATE ON user_item_progress
    FOR EACH ROW
    WHEN (OLD.is_completed = FALSE AND NEW.is_completed = TRUE)
    EXECUTE FUNCTION update_user_statistics();

-- 모듈 완료 시 통계 업데이트
CREATE OR REPLACE FUNCTION update_module_completion_stats()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.status = 'completed' AND (OLD.status IS NULL OR OLD.status != 'completed') THEN
        UPDATE user_statistics
        SET total_modules_completed = total_modules_completed + 1
        WHERE user_id = NEW.user_id;
    END IF;
    RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_stats_on_module_complete
    AFTER UPDATE ON user_module_progress
    FOR EACH ROW
    WHEN (NEW.status = 'completed')
    EXECUTE FUNCTION update_module_completion_stats();
```




## 추가로 필요한 테이블들:

### 1. 앱 설정 및 정책 관련
```sql
-- 앱 설정 및 정책
CREATE TABLE app_settings (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT,
    setting_type VARCHAR(50), -- 'policy', 'version', 'maintenance' 등
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- 이용약관 및 정책 동의 기록
CREATE TABLE user_agreements (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    agreement_type VARCHAR(50) NOT NULL, -- 'terms', 'privacy_policy' 등
    version VARCHAR(20) NOT NULL,
    agreed_at TIMESTAMPTZ DEFAULT NOW(),
    ip_address INET,
    UNIQUE(user_id, agreement_type, version)
);
```

### 2. 오프라인 지원을 위한 다운로드 관련
```sql
-- 오프라인 콘텐츠 다운로드 기록
CREATE TABLE offline_downloads (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    module_id UUID NOT NULL REFERENCES modules(id),
    session_id UUID REFERENCES sessions(id),
    download_type VARCHAR(50), -- 'full_module', 'session', 'audio' 등
    file_size_mb DECIMAL(10,2),
    downloaded_at TIMESTAMPTZ DEFAULT NOW(),
    last_accessed_at TIMESTAMPTZ,
    is_deleted BOOLEAN DEFAULT FALSE
);
```

### 3. 세션 아이템 아이콘 관리
```sql
-- 아이콘 타입 정의 테이블
CREATE TABLE icon_types (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    icon_name VARCHAR(50) UNIQUE NOT NULL, -- 'plant', 'star', 'heart', 'brain' 등
    icon_url TEXT,
    category VARCHAR(50) -- 'session', 'achievement', 'category' 등
);
```

### 4. 세션 진행률 세분화 기록
```sql
-- 세션 내 진행 체크포인트 (25%, 50%, 75% 기록용)
CREATE TABLE session_progress_checkpoints (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_id UUID NOT NULL REFERENCES sessions(id),
    checkpoint_percentage INTEGER CHECK (checkpoint_percentage IN (25, 50, 75, 100)),
    reached_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, session_id, checkpoint_percentage)
);
```

### 5. Today 탭의 "View module" 클릭 추적
```sql
-- 사용자 인터페이스 상호작용 추적
CREATE TABLE ui_interaction_logs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    interaction_type VARCHAR(50), -- 'view_module_click', 'tab_switch' 등
    screen_name VARCHAR(50),
    element_name VARCHAR(100),
    metadata JSONB,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 6. 주간 스트릭 상세 기록
```sql
-- 주간 스트릭 히스토리 (과거 기록 보관)
CREATE TABLE weekly_streak_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    week_start_date DATE NOT NULL,
    week_end_date DATE NOT NULL,
    days_completed INTEGER DEFAULT 0,
    streak_broken BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, week_start_date)
);
```

### 7. 앱 버전 및 업데이트 관리
```sql
-- 앱 버전 정보
CREATE TABLE app_versions (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    version_number VARCHAR(20) NOT NULL,
    platform VARCHAR(20) CHECK (platform IN ('ios', 'android', 'web')),
    release_notes TEXT,
    is_mandatory_update BOOLEAN DEFAULT FALSE,
    min_supported_version VARCHAR(20),
    released_at TIMESTAMPTZ DEFAULT NOW()
);

-- 사용자별 앱 버전 기록
CREATE TABLE user_app_versions (
    user_id TEXT PRIMARY KEY REFERENCES users(id) ON DELETE CASCADE,
    current_version VARCHAR(20),
    platform VARCHAR(20),
    last_updated_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 8. 추가 인덱스
```sql
-- 새로운 테이블들을 위한 인덱스
CREATE INDEX idx_user_agreements_user ON user_agreements(user_id);
CREATE INDEX idx_offline_downloads_user ON offline_downloads(user_id, is_deleted);
CREATE INDEX idx_session_checkpoints_user ON session_progress_checkpoints(user_id);
CREATE INDEX idx_ui_interactions_user_time ON ui_interaction_logs(user_id, created_at);
CREATE INDEX idx_streak_history_user ON weekly_streak_history(user_id, week_start_date);
```

### 9. RLS 정책 추가
```sql
-- 새 테이블들에 대한 RLS 활성화
ALTER TABLE user_agreements ENABLE ROW LEVEL SECURITY;
ALTER TABLE offline_downloads ENABLE ROW LEVEL SECURITY;
ALTER TABLE session_progress_checkpoints ENABLE ROW LEVEL SECURITY;
ALTER TABLE ui_interaction_logs ENABLE ROW LEVEL SECURITY;
ALTER TABLE weekly_streak_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_app_versions ENABLE ROW LEVEL SECURITY;

-- RLS 정책
CREATE POLICY "Users can manage own agreements" ON user_agreements
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own downloads" ON offline_downloads
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own checkpoints" ON session_progress_checkpoints
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own interactions" ON ui_interaction_logs
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own streak history" ON weekly_streak_history
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can view own app version" ON user_app_versions
    FOR ALL USING (auth.uid() = user_id);

-- 공개 정책
CREATE POLICY "Anyone can view app settings" ON app_settings
    FOR SELECT USING (true);

CREATE POLICY "Anyone can view app versions" ON app_versions
    FOR SELECT USING (true);

CREATE POLICY "Anyone can view icon types" ON icon_types
    FOR SELECT USING (true);
```



## 추가로 필요한 테이블들:

### 1. 검색 및 필터링 관련
```sql
-- 검색 히스토리
CREATE TABLE search_history (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    search_query VARCHAR(200) NOT NULL,
    search_type VARCHAR(50), -- 'module', 'keyword', 'category' 등
    results_count INTEGER,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 모듈 태그 (검색 최적화용)
CREATE TABLE module_tags (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    module_id UUID NOT NULL REFERENCES modules(id) ON DELETE CASCADE,
    tag_name VARCHAR(50) NOT NULL,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(module_id, tag_name)
);

-- 사용자 관심 모듈 (북마크)
CREATE TABLE user_module_bookmarks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    module_id UUID NOT NULL REFERENCES modules(id),
    bookmarked_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, module_id)
);
```

### 2. 오디오 재생 진행상황
```sql
-- 오디오 재생 진행 상태
CREATE TABLE audio_playback_progress (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_item_id UUID NOT NULL REFERENCES session_items(id),
    last_position_seconds INTEGER DEFAULT 0,
    total_duration_seconds INTEGER,
    playback_speed DECIMAL(3,2) DEFAULT 1.0,
    is_completed BOOLEAN DEFAULT FALSE,
    last_played_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, session_item_id)
);
```

### 3. 푸시 알림 토큰 관리
```sql
-- 사용자 기기 정보 및 푸시 토큰
CREATE TABLE user_devices (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    device_id VARCHAR(255) NOT NULL,
    platform VARCHAR(20) CHECK (platform IN ('ios', 'android', 'web')),
    push_token TEXT,
    device_model VARCHAR(100),
    os_version VARCHAR(50),
    app_version VARCHAR(20),
    is_active BOOLEAN DEFAULT TRUE,
    last_active_at TIMESTAMPTZ DEFAULT NOW(),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, device_id)
);
```

### 4. 세션 잠금 해제 규칙
```sql
-- 세션 해제 조건 정의
CREATE TABLE session_unlock_rules (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    session_id UUID NOT NULL REFERENCES sessions(id) ON DELETE CASCADE,
    unlock_type VARCHAR(50), -- 'previous_completed', 'time_based', 'score_based' 등
    unlock_condition JSONB, -- {"previous_session_id": "...", "required_score": 80} 등
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 5. 사용자 피드백
```sql
-- 세션/레슨에 대한 사용자 피드백
CREATE TABLE user_feedback (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    session_item_id UUID REFERENCES session_items(id),
    module_id UUID REFERENCES modules(id),
    feedback_type VARCHAR(20) CHECK (feedback_type IN ('thumbs_up', 'thumbs_down')),
    feedback_text TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
```

### 6. 앱 내 공지사항 및 메시지
```sql
-- 앱 내 공지사항
CREATE TABLE announcements (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    title VARCHAR(200) NOT NULL,
    content TEXT NOT NULL,
    announcement_type VARCHAR(50), -- 'general', 'update', 'maintenance' 등
    priority INTEGER DEFAULT 0,
    target_audience VARCHAR(50), -- 'all', 'new_users', 'active_users' 등
    start_date TIMESTAMPTZ DEFAULT NOW(),
    end_date TIMESTAMPTZ,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW()
);

-- 사용자별 공지사항 읽음 상태
CREATE TABLE user_announcement_reads (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    announcement_id UUID NOT NULL REFERENCES announcements(id) ON DELETE CASCADE,
    read_at TIMESTAMPTZ DEFAULT NOW(),
    UNIQUE(user_id, announcement_id)
);
```

### 8. 최근 본 모듈 히스토리
```sql
-- 최근 본 모듈 기록
CREATE TABLE recently_viewed_modules (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id TEXT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    module_id UUID NOT NULL REFERENCES modules(id),
    viewed_at TIMESTAMPTZ DEFAULT NOW(),
    view_count INTEGER DEFAULT 1,
    UNIQUE(user_id, module_id)
);
```

### 9. 추가 인덱스
```sql
-- 새로운 테이블들을 위한 인덱스
CREATE INDEX idx_search_history_user ON search_history(user_id, created_at DESC);
CREATE INDEX idx_module_tags_module ON module_tags(module_id);
CREATE INDEX idx_module_tags_tag ON module_tags(tag_name);
CREATE INDEX idx_user_bookmarks ON user_module_bookmarks(user_id);
CREATE INDEX idx_audio_progress_user ON audio_playback_progress(user_id, session_item_id);
CREATE INDEX idx_user_devices_user ON user_devices(user_id, is_active);
CREATE INDEX idx_user_devices_token ON user_devices(push_token) WHERE push_token IS NOT NULL;
CREATE INDEX idx_user_feedback_user ON user_feedback(user_id);
CREATE INDEX idx_announcements_active ON announcements(is_active, start_date, end_date);
CREATE INDEX idx_recently_viewed ON recently_viewed_modules(user_id, viewed_at DESC);
```

### 10. RLS 정책 추가
```sql
-- 새 테이블들에 대한 RLS 활성화
ALTER TABLE search_history ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_module_bookmarks ENABLE ROW LEVEL SECURITY;
ALTER TABLE audio_playback_progress ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_devices ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_feedback ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_announcement_reads ENABLE ROW LEVEL SECURITY;
ALTER TABLE recently_viewed_modules ENABLE ROW LEVEL SECURITY;

-- RLS 정책
CREATE POLICY "Users can manage own search history" ON search_history
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own bookmarks" ON user_module_bookmarks
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own audio progress" ON audio_playback_progress
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own devices" ON user_devices
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own feedback" ON user_feedback
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own announcement reads" ON user_announcement_reads
    FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "Users can manage own recently viewed" ON recently_viewed_modules
    FOR ALL USING (auth.uid() = user_id);

-- 공개 정책
CREATE POLICY "Anyone can view module tags" ON module_tags
    FOR SELECT USING (true);

CREATE POLICY "Anyone can view active announcements" ON announcements
    FOR SELECT USING (is_active = true AND start_date <= NOW() AND (end_date IS NULL OR end_date > NOW()));

CREATE POLICY "Anyone can view unlock rules" ON session_unlock_rules
    FOR SELECT USING (true);
