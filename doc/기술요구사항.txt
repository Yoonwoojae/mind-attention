## 📱 기술 요구사항

### 1. **기본 기술 스택**
- **Frontend**: Flutter (최신 안정화 버전)
- **인증**: Firebase Authentication
- **데이터베이스**: Supabase (PostgreSQL)
- **실시간 동기화**: Supabase Realtime
- **파일 저장소**: Supabase Storage (오디오, 이미지)
- **푸시 알림**: Firebase Cloud Messaging (FCM)
- **애널리틱스**: Firebase Analytics
- **크래시 리포팅**: Firebase Crashlytics

### 2. **Flutter 패키지 요구사항**

#### **필수 패키지**
```yaml
# 인증 및 Firebase
firebase_core: ^latest
firebase_auth: ^latest
firebase_messaging: ^latest
firebase_analytics: ^latest
firebase_crashlytics: ^latest

# Supabase
supabase_flutter: ^latest

# 상태관리
flutter_riverpod: ^latest  # or provider
flutter_hooks: ^latest

# 네비게이션
go_router: ^latest

# 로컬 저장소
shared_preferences: ^latest
hive_flutter: ^latest  # 오프라인 캐싱용

# UI 컴포넌트
flutter_svg: ^latest
cached_network_image: ^latest
shimmer: ^latest
percent_indicator: ^latest

# 오디오 재생
just_audio: ^latest
audio_video_progress_bar: ^latest

# 알림
flutter_local_notifications: ^latest
timezone: ^latest

# 유틸리티
intl: ^latest
dio: ^latest
connectivity_plus: ^latest
path_provider: ^latest
```

### 3. **주요 기능별 기술 요구사항**

#### **인증 시스템**
- Firebase Auth와 Supabase 사용자 동기화
- 소셜 로그인 (Google, Apple)
- 이메일/비밀번호 로그인
- 자동 로그인 및 세션 관리

#### **오프라인 지원**
- Hive를 이용한 로컬 데이터 캐싱
- 오디오 파일 다운로드 및 로컬 저장
- 오프라인 상태에서 진행상황 저장 후 동기화
- NetworkManager를 통한 연결 상태 모니터링

#### **오디오 기능**
- 백그라운드 재생 지원
- 재생 속도 조절 (0.5x ~ 2.0x)
- 재생 위치 저장 및 복원
- 오프라인 재생을 위한 다운로드 관리

#### **알림 시스템**
- FCM을 통한 원격 푸시 알림
- Local Notifications를 통한 예약 알림
- 시간대별 맞춤 알림 스케줄링
- 알림 권한 관리

### 4. **앱 아키텍처 요구사항**

#### **폴더 구조**
```
lib/
├── core/
│   ├── config/
│   ├── constants/
│   ├── errors/
│   └── utils/
├── data/
│   ├── datasources/
│   ├── models/
│   └── repositories/
├── domain/
│   ├── entities/
│   ├── repositories/
│   └── usecases/
├── presentation/
│   ├── providers/
│   ├── screens/
│   ├── widgets/
│   └── themes/
└── main.dart
```

#### **상태관리 패턴**
- Riverpod을 이용한 의존성 주입
- StateNotifier 패턴 적용
- 화면별 ViewModel 구현

### 5. **데이터 동기화 요구사항**

#### **실시간 동기화**
- 학습 진행상황 실시간 업데이트
- 다중 기기 간 진행상황 동기화
- Supabase Realtime 구독 관리

#### **충돌 해결**
- 오프라인 변경사항 큐잉 시스템
- 서버-클라이언트 데이터 충돌 해결 로직
- 타임스탬프 기반 동기화

### 6. **UI/UX 기술 요구사항**

#### **반응형 디자인**
- 다양한 화면 크기 지원 (폰, 태블릿)
- 가로/세로 모드 대응
- 다크모드 지원

#### **애니메이션**
- Hero 애니메이션 (화면 전환)
- 진행률 애니메이션
- 로딩 스켈레톤

#### **접근성**
- 스크린 리더 지원
- 큰 글씨 모드
- 고대비 모드

### 7. **성능 요구사항**

#### **최적화**
- 이미지 lazy loading
- 리스트 virtualization
- 메모리 누수 방지
- 불필요한 rebuild 최소화

#### **캐싱 전략**
- 네트워크 이미지 캐싱
- API 응답 캐싱
- 오디오 파일 캐싱

### 8. **보안 요구사항**

#### **데이터 보안**
- 민감한 데이터 암호화
- Secure Storage 사용
- API 키 난독화
- Certificate Pinning

#### **인증 보안**
- JWT 토큰 관리
- 자동 로그아웃
- 생체 인증 지원

### 9. **테스트 요구사항**

```yaml
# 테스트 패키지
dev_dependencies:
  flutter_test: sdk: flutter
  integration_test: sdk: flutter
  mockito: ^latest
  build_runner: ^latest
  flutter_lints: ^latest
```

- Unit Test: 비즈니스 로직
- Widget Test: UI 컴포넌트
- Integration Test: 주요 사용자 시나리오

### 10. **배포 및 CI/CD**

#### **빌드 설정**
- 환경별 설정 분리 (dev, staging, prod)
- 코드 난독화
- 앱 사이즈 최적화

#### **CI/CD 파이프라인**
- GitHub Actions 또는 Codemagic
- 자동 테스트
- 자동 빌드 및 배포

### 11. **모니터링 요구사항**

- Firebase Performance Monitoring
- 사용자 행동 분석 (Analytics)
- 크래시 리포팅
- A/B 테스팅 지원

### 12. **플랫폼별 특수 요구사항**

#### **iOS**
- 최소 지원 버전: iOS 12.0
- 백그라운드 오디오 권한
- 푸시 알림 권한

#### **Android**
- 최소 지원 버전: API 21 (Android 5.0)
- 백그라운드 서비스 최적화
- 배터리 최적화 예외 처리
